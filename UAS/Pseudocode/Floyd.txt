FloydAlgorithm is:
	output:
		shortest_path [][]
		
	shortest_path := adj  // Initialization value with adjacency matrix
	
	for i in range [0...n_vertex):
		shortest_path = getCurrentShortestPath(shortest_path, i)

		
getCurrentShortestPath is:
	input:
		prev_matrix[][],
		mid int
	output:
		curr_matrix [][]
	
	curr_matrix := prev_matrix
	
	for i in range [0...n_vertex):
		for j in range [0...n_vertex):
			/* 
			 * Shortest path will update if one of the new path
			 * (either from start vertex to intermadiate vertex or from intermadiate vertex to end vertex)
			 * doesn't has INT_MAX as distance value (can reach)
			 */
			if max(prev_matrix[i][mid], prev_matrix[mid][j]) != oo:
				curr_matrix[i][j] = min(prev_matrix[i][j], (prev_matrix[i][mid] + prev_matrix[mid][j]))

				